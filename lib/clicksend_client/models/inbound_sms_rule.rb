=begin
#ClickSend v3 API

# This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 

OpenAPI spec version: 3.1
Contact: support@clicksend.com
Generated by: https://github.com/clicksend-api/clicksend-codegen.git
ClickSend Codegen version: 2.4.36

=end

require 'date'

module ClickSendClient
  # Model for Inbound SMS Rules
  class InboundSMSRule
    # Dedicated Number. Can be '*' to apply to all numbers.
    attr_accessor :dedicated_number

    # Rule Name.
    attr_accessor :rule_name

    # Message Search Type: 0=Any message, 1=starts with, 2=contains, 3=does not contain.
    attr_accessor :message_search_type

    # Message search term.
    attr_accessor :message_search_term

    # Action to be taken (AUTO_REPLY, EMAIL_USER, EMAIL_FIXED, URL, SMS, POLL, GROUP_SMS, MOVE_CONTACT, CREATE_CONTACT, CREATE_CONTACT_PLUS_EMAIL, CREATE_CONTACT_PLUS_NAME_EMAIL CREATE_CONTACT_PLUS_NAME, SMPP, NONE).
    attr_accessor :action

    # Action address.
    attr_accessor :action_address

    # Enabled: Disabled=0 or Enabled=1.
    attr_accessor :enabled

    # post, get, or json. post by default
    attr_accessor :webhook_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'dedicated_number' => :'dedicated_number',
        :'rule_name' => :'rule_name',
        :'message_search_type' => :'message_search_type',
        :'message_search_term' => :'message_search_term',
        :'action' => :'action',
        :'action_address' => :'action_address',
        :'enabled' => :'enabled',
        :'webhook_type' => :'webhook_type'
      }
    end

    # Attribute type mapping.
    def self.clicksend_types
      {
        :'dedicated_number' => :'String',
        :'rule_name' => :'String',
        :'message_search_type' => :'Float',
        :'message_search_term' => :'String',
        :'action' => :'String',
        :'action_address' => :'String',
        :'enabled' => :'Float',
        :'webhook_type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'dedicated_number')
        self.dedicated_number = attributes[:'dedicated_number']
      end

      if attributes.has_key?(:'rule_name')
        self.rule_name = attributes[:'rule_name']
      end

      if attributes.has_key?(:'message_search_type')
        self.message_search_type = attributes[:'message_search_type']
      end

      if attributes.has_key?(:'message_search_term')
        self.message_search_term = attributes[:'message_search_term']
      end

      if attributes.has_key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.has_key?(:'action_address')
        self.action_address = attributes[:'action_address']
      end

      if attributes.has_key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.has_key?(:'webhook_type')
        self.webhook_type = attributes[:'webhook_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @dedicated_number.nil?
        invalid_properties.push('invalid value for "dedicated_number", dedicated_number cannot be nil.')
      end

      if @rule_name.nil?
        invalid_properties.push('invalid value for "rule_name", rule_name cannot be nil.')
      end

      if @message_search_type.nil?
        invalid_properties.push('invalid value for "message_search_type", message_search_type cannot be nil.')
      end

      if @message_search_term.nil?
        invalid_properties.push('invalid value for "message_search_term", message_search_term cannot be nil.')
      end

      if @action.nil?
        invalid_properties.push('invalid value for "action", action cannot be nil.')
      end

      if @action_address.nil?
        invalid_properties.push('invalid value for "action_address", action_address cannot be nil.')
      end

      if @enabled.nil?
        invalid_properties.push('invalid value for "enabled", enabled cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @dedicated_number.nil?
      return false if @rule_name.nil?
      return false if @message_search_type.nil?
      return false if @message_search_term.nil?
      return false if @action.nil?
      return false if @action_address.nil?
      return false if @enabled.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          dedicated_number == o.dedicated_number &&
          rule_name == o.rule_name &&
          message_search_type == o.message_search_type &&
          message_search_term == o.message_search_term &&
          action == o.action &&
          action_address == o.action_address &&
          enabled == o.enabled &&
          webhook_type == o.webhook_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [dedicated_number, rule_name, message_search_type, message_search_term, action, action_address, enabled, webhook_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.clicksend_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ClickSendClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
