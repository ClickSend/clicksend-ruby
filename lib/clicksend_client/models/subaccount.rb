=begin
#ClickSend v3 API

# This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 

OpenAPI spec version: 3.1
Contact: support@clicksend.com
Generated by: https://github.com/clicksend-api/clicksend-codegen.git
ClickSend Codegen version: 2.4.36

=end

require 'date'

module ClickSendClient
  # Accounts that are maintained under a main account
  class Subaccount
    # Your new api username.
    attr_accessor :api_username

    # Your new password
    attr_accessor :password

    # Your new email.
    attr_accessor :email

    # Your phone number in E.164 format.
    attr_accessor :phone_number

    # Your firstname
    attr_accessor :first_name

    # Your lastname
    attr_accessor :last_name

    # Your access users flag value, must be 1 or 0.
    attr_accessor :access_users

    # Your access billing flag value, must be 1 or 0.
    attr_accessor :access_billing

    # Your access reporting flag value, must be 1 or 0.
    attr_accessor :access_reporting

    # Your access contacts flag value, must be 1 or 0.
    attr_accessor :access_contacts

    # Your access settings flag value, must be 1 or 0.
    attr_accessor :access_settings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'api_username' => :'api_username',
        :'password' => :'password',
        :'email' => :'email',
        :'phone_number' => :'phone_number',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'access_users' => :'access_users',
        :'access_billing' => :'access_billing',
        :'access_reporting' => :'access_reporting',
        :'access_contacts' => :'access_contacts',
        :'access_settings' => :'access_settings'
      }
    end

    # Attribute type mapping.
    def self.clicksend_types
      {
        :'api_username' => :'String',
        :'password' => :'String',
        :'email' => :'String',
        :'phone_number' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'access_users' => :'Integer',
        :'access_billing' => :'Integer',
        :'access_reporting' => :'Integer',
        :'access_contacts' => :'Integer',
        :'access_settings' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'api_username')
        self.api_username = attributes[:'api_username']
      end

      if attributes.has_key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.has_key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.has_key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.has_key?(:'access_users')
        self.access_users = attributes[:'access_users']
      else
        self.access_users = 1
      end

      if attributes.has_key?(:'access_billing')
        self.access_billing = attributes[:'access_billing']
      else
        self.access_billing = 1
      end

      if attributes.has_key?(:'access_reporting')
        self.access_reporting = attributes[:'access_reporting']
      else
        self.access_reporting = 1
      end

      if attributes.has_key?(:'access_contacts')
        self.access_contacts = attributes[:'access_contacts']
      else
        self.access_contacts = 0
      end

      if attributes.has_key?(:'access_settings')
        self.access_settings = attributes[:'access_settings']
      else
        self.access_settings = 1
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @api_username.nil?
        invalid_properties.push('invalid value for "api_username", api_username cannot be nil.')
      end

      if @password.nil?
        invalid_properties.push('invalid value for "password", password cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @phone_number.nil?
        invalid_properties.push('invalid value for "phone_number", phone_number cannot be nil.')
      end

      if @first_name.nil?
        invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @api_username.nil?
      return false if @password.nil?
      return false if @email.nil?
      return false if @phone_number.nil?
      return false if @first_name.nil?
      return false if @last_name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          api_username == o.api_username &&
          password == o.password &&
          email == o.email &&
          phone_number == o.phone_number &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          access_users == o.access_users &&
          access_billing == o.access_billing &&
          access_reporting == o.access_reporting &&
          access_contacts == o.access_contacts &&
          access_settings == o.access_settings
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [api_username, password, email, phone_number, first_name, last_name, access_users, access_billing, access_reporting, access_contacts, access_settings].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.clicksend_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ClickSendClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
